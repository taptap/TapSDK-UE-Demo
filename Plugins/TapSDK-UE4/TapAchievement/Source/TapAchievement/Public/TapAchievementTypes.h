// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "JsonObjectConverter.h"
#include "TapAchievementTypes.generated.h"


enum class ELanguageType : uint8;
/**
 * Tap achievement description
 */
USTRUCT(BlueprintType)
struct TAPACHIEVEMENT_API FAchievementDescTap
{
	GENERATED_BODY()
	
	FAchievementDescTap() = default;
	
	FAchievementDescTap(const TSharedPtr<FJsonObject>& JsonObject);
	
	/** Unique achievement description id generated by TapTap, Use DisplayId instead */
	UPROPERTY()
	FString AchievementId;

	/** Achievement id */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	FString DisplayId;

	/** Is hidden by default */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	bool bIsHide = false;

	/** Achievement max steps */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	int32 CountStep = 0;

	/** Display order default */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	int32 ShowOrder = 0;

	/** Achievement title */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	FString AchievementTitle;

	/** Achievement description */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	FString AchievementSubtitle;
	
	/** The download url for achievement icon */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	FString AchievementIconUrl;

	/** Achievement reached ratio  */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	float Rarity = 0.f;

	/** Used to parse net data */
	double RarityD = 0.0;

	/**
	 * Achievement level, calculate by server with rarity
	 * 1 : 0.5 <= Rarity <= 1
	 * 2 : 0.1 <= Rarity < 0.5
	 * 3 : 0.01 <= Rarity < 0.1
	 * 4 : Rarity < 0.01
	 */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	int32 Level = 1;

	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	int32 Type = 1;
	
	/**
	 * Icon texture configured 
	 * @see FTapAchievementCommon::AsyncDownloadAllAchievementIcon
	 * set IconTexture = nullptr if you wants release resource. then it will be GC by engine
	 */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	mutable UTexture2D* IconTexture = nullptr;

	FORCEINLINE bool IsPlatinum() const { return Type == 99; }
};

/**
 * Achievement progress
 */
USTRUCT(BlueprintType)
struct TAPACHIEVEMENT_API FAchievementTap
{
	GENERATED_BODY()

	FAchievementTap() = default;
	
	FAchievementTap(const TSharedPtr<FJsonObject>& JsonObject);

	FAchievementTap(const FAchievementDescTap& Desc);
	
	void Write(const TSharedRef<TJsonWriter<TCHAR, TCondensedJsonPrintPolicy<TCHAR>>>& Writer) const;

	bool UpdateStep(const FAchievementDescTap& Description, int32 NewStep);
	
	/** Unique achievement description id generated by TapTap, Use DisplayId instead */
	UPROPERTY()
	FString AchievementId;

	/** Achievement id */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	FString DisplayId;

	/** Achievement full complete time, if exist */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	FDateTime CompleteTime;

	/** Achievement current step, if exist */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	int32 CompleteStep = 0;

	/** Is achievement full complete (FAchievementTap.CompleteStep == FAchievementDescTap.CountStep)  */
	UPROPERTY(BlueprintReadOnly, EditAnywhere)
	bool bFullCompleted = false;
};

USTRUCT()
struct FAchievementLanguage
{
	GENERATED_BODY()
	
	void UpdateLanguage(ELanguageType NewType);

	UPROPERTY()
	FText DialogStatus;

	UPROPERTY()
	FText DialogPercent;

	UPROPERTY()
	FText DialogPercentLow;

	UPROPERTY()
	FText DialogEarnedDate;

	UPROPERTY()
	FText InvisibleTitle;

	UPROPERTY()
	FText InvisibleSubtitle;

	UPROPERTY()
	FText Unlocked;

	UPROPERTY()
	FText Locked;

	UPROPERTY()
	FText RarityCommon;

	UPROPERTY()
	FText RarityUncommon;

	UPROPERTY()
	FText RarityRare;

	UPROPERTY()
	FText RarityUltraRare;

	UPROPERTY()
	FText PopTitle;
};

extern TAPACHIEVEMENT_API FAchievementLanguage*	GAchievementLanguage;
